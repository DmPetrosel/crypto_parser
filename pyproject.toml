[project]
name = "P2P_bot"
version = "2.0.2"
description = "any"
readme = "README.md"
authors = [{ name = "Any" }]
classifiers = ["Private :: Do Not Upload"]
dependencies = [
    'matplotlib==3.7.3',
    'XlsxWriter==3.2.0',
    'dnspython',
    'greenlet~=3.1',
    'redis~=5.2.1',
    'pydantic-settings~=2.8',
    'alembic==1.14.1',
    'sqlalchemy==2.0.40',
    'aiogram==3.0.0',
    'loguru==0.7.3',
    'aiosqlite==0.21.0',
    'pandas==2.2.3',
    'openpyxl==3.1.5',
    'redis==6.0.0',
    'loguru',
    'black',
    

]

requires-python = ">=3.10"


[project.optional-dependencies]
test = []
dev = [
    'ruff',
]

[project.scripts]
run_bot = "src.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "*.eggs",
    "build",
    "dist",
    "venv",
    "setup.py",
]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
ignore = [
    "B008", # Do not perform function calls in argument defaults
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D200", # One-line docstring should fit on one line with quotes
    "D202", # No blank lines allowed after function docstring
    "D205", # 1 blank line required between summary line and description
    "D208", # Docstring is over-indented
    "D210", # No whitespaces allowed surrounding docstring text
    "D211", # No blank lines allowed before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D400", # First line should end with a period
    "D403", # First word of the first line should be properly capitalized
    "D413", # Missing blank line after last section
    "D415", # First line should end with a period, question mark, or exclamation point
    "N802", # Function name should be lowercase
    "N806", # Variable in function should be lowercase
    "N818", # Exception name should be named with an Error suffix
    "S101", # Use of assert detected
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "RET503", # Missing explicit `return` at the end of function able to return non-`None` value
    "COM812", # Missing trailing comma in a sequence - ruff format
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used
    "B904", # raise ... from err
    "ANN201", # Missing return type annotation for public function
    "RET504",  # Unnecessary assignment
]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "N", # pep8-naming
    "Q", # flake8-quotes
    "S", # flake8-bandit
    "W", # pycodestyle
    "I", # isort
    "UP", # pyupgrade
    "ANN", # flake8-annotations
    #    "BLE", # flake8-blind-except
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    #    "C90", # mccabe (complex)
    "T10",
    #    "EM",
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420 - отсутствие __init__.py
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PL", # Pylint
    "ASYNC", # flake8-async
    # "FBT", # flake8-boolean-trap - желательно включить и исправить
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "RUF013", "RUF100", "RUF200"
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "abstractclassmethod",
    "pydantic.root_validator",
    "pydantic.validator",
]
staticmethod-decorators = [
    "staticmethod",
    "abstractstaticmethod",
]

[tool.ruff.lint.isort]
known-local-folder = ["dq_result_processor"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"src/dq_result_processor/config/settings.py" = ["ARG003"]

[tool.ruff.lint.pylint]
max-args = 8

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false